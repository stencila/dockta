import fs from 'fs'
import path from 'path'
import { SoftwareEnvironment } from '@stencila/schema'

import Parser from './Parser'
import DockerParser from './DockerParser'
import JavascriptParser from './JavascriptParser'
import PythonParser from './PythonParser'
import RParser from './RParser'

import DockerGenerator from './DockerGenerator'
import DockerBuilder from './DockerBuilder'
import DockerExecutor from './DockerExecutor'

export default class DockerCompiler {

  /**
   * Compile a folder into a Docker image
   *
   * @param source The folder, Dockerfile or `SoftwareEnvironment` to compile
   * @param build Should the Docker image be built?
   * @param comments Should comments be added to the Dockerfile?
   */
  async compile (source: string, build: boolean = true, comments: boolean = true): Promise<SoftwareEnvironment | null> {
    let folder
    if (source.substring(0, 7) === 'file://') {
      folder = source.substring(7)
    } else {
      folder = source
    }

    let dockerfile
    let environ

    if (fs.existsSync(path.join(folder, 'Dockerfile'))) {
      // Dockerfile found so use that
      dockerfile = 'Dockerfile'
      environ = await new DockerParser(folder).parse()
    } else {
      if (fs.existsSync(path.join(folder, 'environ.jsonld'))) {
        // Read existing environment from file
        const jsonld = fs.readFileSync(path.join(folder, 'environ.jsonld'), 'utf8')
        const initializer = JSON.parse(jsonld)
        environ = new SoftwareEnvironment(initializer)
      } else {
        // Create environment by merging packages
        // generated by each language parser
        environ = new SoftwareEnvironment()
        let parser: Parser
        for (parser of [
          new JavascriptParser(folder),
          new PythonParser(folder),
          new RParser(folder)
        ]) {
          const pkg = await parser.parse()
          if (pkg) environ.softwareRequirements.push(pkg)
        }

        // Save environ as an intermediate file
        const jsonld = JSON.stringify(environ.toJSONLD(), null, '  ')
        fs.writeFileSync(path.join(folder, '.environ.jsonld'), jsonld)
      }

      // Generate Dockerfile
      dockerfile = '.Dockerfile'
      new DockerGenerator(environ, folder).generate(comments)
    }

    if (build) {
      // Use the name of the environment, if possible
      let name = (environ && environ.name) || undefined
      // Build the image!
      const builder = new DockerBuilder()
      await builder.build(folder, name, dockerfile)
    }

    return environ
  }

  async execute (source: string): Promise<string> {
    // Compile the environment first
    let environ = await this.compile(source)
    if (!environ) throw new Error('Environment not created')
    if (!environ.name) throw new Error('Environment does not have a name')

    // Execute the environment's image (which is built in compile())
    const executor = new DockerExecutor()
    const result = await executor.execute(environ.name)

    return result
  }
}
